#using ExpressEMF.*
#using AttrCondDefLibrary.*

#abstract #rule FirstDataType #with ExpressEMF
#source {
	++is:SimpleTypes
}
#target {
	package:EPackage{
	  ++-eClassifiers-> es
	}
	++es:EDataType
}
#correspondence {
	++ is2es:SimpleTypeToDataType{
		#src->is
		#trg->es
	}
}


#rule FirstStringDataType #extends FirstDataType #with ExpressEMF
#source {
	++is:StringType
}
#target {
	++es:EDataType
}
#attributeConditions {
	eq_string(es.name, "STRING")
	eq_string(es.instanceClassName, "java.lang.String")
}

#rule FirstIntegerDataType #extends FirstDataType #with ExpressEMF
#source {
	++is:IntegerType
}
#target {
	++es:EDataType 
}
#attributeConditions {
	eq_string(es.name, "INTEGER")
	eq_string(es.instanceClassName, "java.lang.Integer")
}

#rule FirstRealDataType #extends FirstDataType #with ExpressEMF
#source {
	++is:RealType
}
#target {
	++es:EDataType
}
#attributeConditions {
	eq_string(es.name, "REAL")
	eq_string(es.instanceClassName, "java.lang.Double")
}

#abstract #rule SubsequentDataType #with ExpressEMF
#source {
	++is:SimpleTypes
}
#target {
	es:EDataType
}

#correspondence {
	++ s2es:SimpleTypeToDataType{
		#src->is
		#trg->es
	}
}

#rule SubsequentStringDataType #extends SubsequentDataType #with ExpressEMF
#source {
	++is:StringType
}
#target {
	es:EDataType {
		name == "STRING"
	}
}


#rule SubsequentIntegerDataTyp #extends SubsequentDataType #with ExpressEMF
#source {
	++is:IntegerType
}
#target {
	es:EDataType {
		name == "INTEGER"
	} 
}

#rule SubsequentRealDataType #extends SubsequentDataType #with ExpressEMF
#source {
	++is:RealType
}
#target {
	es:EDataType {
		name == "REAL"
	} 
}


#nac IntegerSingleton #for FirstIntegerDataType 

#target{
	package:EPackage{
		-eClassifiers->es
	}
	es:EDataType {
		name == "INTEGER"
	}
}

#nac StringSingleton #for FirstStringDataType 

#target{
	package:EPackage{
		-eClassifiers->es
	}
	es:EDataType {
		name == "STRING"
	}
}

#nac RealSingleton #for FirstRealDataType 

#target{
	package:EPackage{
		-eClassifiers->es
	}
	es:EDataType {
		name == "REAL"
	}
}
