#using ExpressEMF.*
#using AttrCondDefLibrary.*

#abstract #rule NamedTypeToClassifier #with ExpressEMF

#source { 
	s:SchemaDecl{
		++ -declarations->t
	}
	++t:NamedTypeDecl
}

#target {
	p:EPackage{
		++ -eClassifiers->c
	}
	++c:EClassifier
}

#correspondence {
	s2p:SchemaToPackage{
		#src->s
		#trg->p
	}
	++e2c:TypeToClassifier{
		#src->t
		#trg->c
	}
}

#attributeConditions {
	eq_string(t.name, c.name) 
}


#rule EntityToClass #extends NamedTypeToClassifier #with ExpressEMF

#source { 
	++t:EntityDecl
}

#target {
	++c:EClass
}

#attributeConditions {
	eq_booleanPrimitive(t.abstract, c.abstract)
}


#rule SimpleTypeToClass #extends NamedTypeToClassifier #with ExpressEMF

#source { 
	++t:TypeDecl {
		++-underlying->ut
	}
	ut:SimpleTypes
}

#target {
	++c:EClass
}

#rule DeclaredTypeToClass #extends NamedTypeToClassifier #with ExpressEMF

#source { 
	++t:TypeDecl {
		++-underlying->ut
	}
	++ut:DeclaredType
}

#target {
	++c:EClass
}

#rule AggregationTypeToClass #extends NamedTypeToClassifier #with ExpressEMF

#source { 
	++t:TypeDecl {
		++-underlying->ut
	}
	++ut:AggregationTypes
}

#target {
	++c:EClass
}


#rule EnumTypeToEnum #extends NamedTypeToClassifier #with ExpressEMF

#source { 
	++t:TypeDecl {
		++-underlying->ut
	}
	++ut:EnumerationType
}

#target {
	++c:EEnum
}






