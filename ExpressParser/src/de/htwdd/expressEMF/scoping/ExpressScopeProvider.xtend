/*
 * generated by Xtext 2.20.0
 */
package de.htwdd.expressEMF.scoping

import de.htwdd.expressEMF.express.AttributeDecl
import de.htwdd.expressEMF.express.EntityDecl
import de.htwdd.expressEMF.express.ExpressPackage
import de.htwdd.expressEMF.express.InverseAttr
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.FilteringScope

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class ExpressScopeProvider extends AbstractExpressScopeProvider {
	
	override getScope(EObject context, EReference reference) {
		switch context{
			InverseAttr: {
				if( reference == ExpressPackage.Literals.INVERSE_ATTR__INVERTED_ATTR){
					var scope = Scopes.scopeFor(
						EcoreUtil2.getAllContentsOfType(EcoreUtil2.getRootContainer(context), AttributeDecl)
					)
					return new FilteringScope(
						scope, [attributeDecl | 
							var declaringEntity = EcoreUtil2.getContainerOfType(attributeDecl.EObjectOrProxy, EntityDecl)
							context.invertedType !== null ? declaringEntity.equals(context.invertedType) : declaringEntity.equals(context.type)
						] // TODO or explicit optional other type (not in IFC4) 
					)
				}
			}
		}
		return super.getScope(context, reference)
	}
		

}
